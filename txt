import "./comissao.css";
import React, { useState } from "react";
import { Button, Form, Input, DatePicker, Modal } from "antd";
import firebase from "../../firebaseConnection";
import GraficComissao from "../../Components/Grafics/Comissao";
import NumberFormat from "react-number-format";
import moment from "moment";
import "moment/locale/pt-br";
import { toast } from "react-toastify";

import "react-toastify/dist/ReactToastify.css";

export default function Comissao() {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isModalVisibleResponse, setIsModalVisibleResponse] = useState(false);
  const [form] = Form.useForm();
  const [resFind, setResFind] = useState([]);
  const [dataFind, setDataFind] = useState();


  const layout = {
    labelCol: {
      span: 9,
    },
    wrapperCol: {
      span: 16,
    },
  };

  const validateMessages = {
    // eslint-disable-next-line
    required: "${label} is required!",
    types: {
      // eslint-disable-next-line
      preco: "${label} is not a valid number!",
      // eslint-disable-next-line
      date: {
        // eslint-disable-next-line
        format: "'${name}' is invalid for format date",
        // eslint-disable-next-line
        parse: "'${name}' could not be parsed as date",
        // eslint-disable-next-line
        invalid: "'${name}' is invalid date",
      },
    },
  };

  const handleCancel = () => {
    setIsModalVisible(false);

  };

  //Coloca o modal de pesquisa como visivel
  setIsModalVisible(true)

  //atribui o valor do formulario do modal de pesquisa ao hook dataFind
  const showModalResponse = (fieldsValue) => {
    let dados = {
      data: moment(fieldsValue.datePicker).format("DD/MM/YYYY"),
      pagamento: fieldsValue.pagamento,
      comentario: fieldsValue.comentario,
    };
    console.log('dados: '+moment(fieldsValue.datePicker).format("DD/MM/YYYY"))
    setIsModalVisibleResponse(true);
    
    // try {
    //   if(fieldsValue !== null || undefined){
    //     setDataFind(dados)
    //     console.log('kk' +dataFind)
    //     setIsModalVisibleResponse(true);
    //   }
      
    // } catch (error) {
    //   console.log('Error: '+ error)
      
    // }
    
    
    
   };

  //  if(isModalVisible === true){
  //   console.log('kk' +dataFind)
  //   search(dataFind);
  //  }

  const handleCancelResponse = () => {
    setIsModalVisibleResponse(false);
    
  };

  const onFinish = (fieldsValue) => {

    async function handleAdd() {
      await firebase
        .firestore()
        .collection("honorarios")
        .add({
          pagamento: fieldsValue.pagamento,
          comissao: fieldsValue.comissao,
          data: moment(fieldsValue.datePicker).format("DD/MM/YYYY"),
          comentario: fieldsValue.comentario,
        })
        .then(() => {
          toast.success("DADOS CADASTRADO COM SUCESSO!");
        })
        .catch((error) => {
          toast.error("GEROU ALGUM ERRO!");
        });
    }
    handleAdd();
    form.resetFields();
  };

  async function search(param) {
    let dados={}
    if(param === null || undefined){
      console.log('param = ' + param)
    }
    else{
    Object.keys(param).forEach(function (item) {
      if (param[item] !== undefined) {
        dados = {
          key: item,
          value: param[item],
        };
     
      }
    });
  

    const db = firebase.firestore();
    const hono = db.collection("honorarios");
    await hono
      .where(dados.key, "==", dados.value)
      .get()
      .then((snapshot) => {
        let lista = [];

        snapshot.forEach((doc) => {
          lista.push({
            id: doc.id,
            pagamento: doc.data().pagamento,
            data: doc.data().data,
            comissao: doc.data().comissao,
            comentario: doc.data().comentario,
          });
        
        });
        setResFind(lista);
        setDataFind('')     
      })
      .then(()=>{
        toast.success("Sucesso!!")
      })
      .catch(() => {
        toast.error("No matching documents.");
        setIsModalVisibleResponse(false)
        setIsModalVisible(false)
        form.resetFields();
      });
  }
}

  return (
      <div id="content-form-grfic">
        {/* Formulario de gravação */}
        <Form
          {...layout}
          name="nest-messages"
          validateMessages={validateMessages}
          form={form}
          onFinish={onFinish}
        >
          <Form.Item
            name={"pagamento"}
            label="R$ Pagamento"
            rules={[
              {
                required: true,
              },
            ]}
          >
            <NumberFormat thousandSeparator={true} className="input-moeda" />
          </Form.Item>

          <Form.Item
            name={"comissao"}
            label="R$ Comissão"
            rules={[
              {
                required: true,
              },
            ]}
          >
            <NumberFormat thousandSeparator={true} className="input-moeda" />
          </Form.Item>

          <Form.Item
            name={"datePicker"}
            label="Data"
            //{...config}
            rules={[
              {
                required: true,
                type: "date",
              },
            ]}
          >
            <DatePicker format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name={"comentario"} label="Comentário">
            <Input.TextArea />
          </Form.Item>

          <Form.Item>
            <div className="btns">
              <Button id="gravar" type="primary" htmlType="submit">
                Gravar
              </Button>
              <Button
                id="find-btn"
                type="primary"
                onClick={setIsModalVisible}
              >
                Pesquisar
              </Button>
            </div>
          </Form.Item>
        </Form>
        
        {/* Modal de pesquisa */}
        <Modal
          className='modal'
          title="Pesquisa"
          visible={isModalVisible}
          footer={null}
          maskClosable={true}
          destroyOnClose={true}
        >
          <Form onFinish={showModalResponse}>
            <Form.Item
              name={"datePicker"}
              label="Data"
              rules={[
                {
                  required: false,
                  type: "date",
                },
              ]}
            >
              <DatePicker name={"datePicker"} format="DD/MM/YYYY" />
            </Form.Item>

            <Form.Item
              name={"pagamento"}
              label="R$ Pagamento"
              rules={[
                {
                  required: false,
                },
              ]}
            >
              <NumberFormat thousandSeparator={true} className="input-moeda" />
            </Form.Item>

            <Form.Item name={"comentario"} label="Comentário">
              <Input.TextArea />
            </Form.Item>

            <Form.Item>
              <div className="btns">
                <Button
                  className="find-btn"
                  type="primary"
                  htmlType="submit"
                >
                  Pesquisar
                </Button>
                <Button id="find-btn" type="primary" onClick={handleCancel}>
                  Cancel
                </Button>
              </div>
            </Form.Item>
          </Form>
        </Modal>

        {/* Modal de resposta */}
        <Modal
          className='modal'
          title="Resultado"
          visible={isModalVisibleResponse}
          footer={null}
          maskClosable={true}
          destroyOnClose={true}
        >
          <ol>
        {console.log('resFind: '+resFind)}
        { resFind != null &&        
        resFind.map((res) => {
          return(
            <li key={res.id}>
              <span>Pagamento: {res.pagamento} </span> <br />
              <span>Data: {res.data} </span> <br />
              <span>Comentario: {res.comentario} </span> <br />
              <span>Comissão: {res.comissao} </span> <br /> <br />
            </li>       
          )
        })}
      </ol>

          <div className="btns">
            <Button
              id="find-btn"
              type="primary"
              onClick={handleCancelResponse}
            >
              Fechar
            </Button>
          </div>
        </Modal>

        <GraficComissao className="grafic-comissao" />
      </div>
  );
}
